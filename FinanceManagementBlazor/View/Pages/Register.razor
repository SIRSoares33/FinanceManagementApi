@page "/Register"
@using FinanceManagementBlazor.Entities
@using FinanceManagementBlazor.Entities.Enums
@using FinanceManagementBlazor.Services.Auth
@using FinanceManagementBlazor.Storage.Token
@using FinanceManagementBlazor.View.Components

@layout FinanceManagementBlazor.View.Layout.NoMenuLayout

@inject IUserLoggedStorage userStorage
@inject IAuthService authService
@inject AuthModel authModel
@inject NavigationManager Navigation


<link rel="stylesheet" href="/css/login.css"/>

<div class="d-flex justify-content-center align-items-center vh-100 login-container">
    <div class="card login-card">
        <h3 class="text-center login-title">Inscrever-se</h3>
        
        @if(string.IsNullOrEmpty(messageErro) is false)
        {
            <Message caption="Erro" context="@messageErro" messageType="EMessageType.Error"/>
        }
        @if(string.IsNullOrEmpty(messageSuccess) is false)
        {
            <Message caption="Sucesso" context="@messageSuccess" messageType="EMessageType.Success"/>
        }

        <Entry type="name" label="Nome" placeholder="Como podemos te chamar?" @bind-Value="authModel.Name"></Entry>
        <Entry type="email" label="Email" placeholder="Digite seu email." @bind-Value="authModel.Email"></Entry>
        <Entry type="password" label="Senha" placeholder="Digite sua senha." @bind-Value="authModel.Password"></Entry>

        <div class="d-grid gap-3 mt-4">
            <button type="button" class="btn btn-outline-success fw-bold rounded-pill shadow-sm register-button" @onclick="OnRegister" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"/>
                }
                Registrar-se
            </button>

            <button type="button" class="btn btn-primary btn-lg fw-bold rounded-pill shadow-sm login-button" @onclick="OnLogin">
                Login
            </button>
        </div>
    </div>
</div>

@code
{
    #region System Properties
    private bool isLoading = false;
    private string messageErro = string.Empty;
    private string messageSuccess = string.Empty;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        if (await userStorage.ItemExistsAsync()) Navigation.NavigateTo("/Home");
    }

    public async Task OnRegister()
    {
        isLoading = true;
        messageErro = string.Empty;
        messageSuccess = string.Empty;
        StateHasChanged();
        
        try
        {
            await authService.Register(authModel);
            messageSuccess = "Registro realizado com sucesso!";
        }
        catch(HttpRequestException)
        {
            messageErro = "Erro no servidor";
        }
        catch(Exception ex)
        {
            messageErro = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
    public void OnLogin()
        => Navigation.NavigateTo("/");
} 