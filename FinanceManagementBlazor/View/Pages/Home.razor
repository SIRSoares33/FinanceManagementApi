@page "/Home"
@layout FinanceManagementBlazor.View.Layout.NoMenuLayout
@inject IHomeService service 
@inject NavigationManager Navigate
@inject AuthProvider authProvider

@attribute [Authorize]

<link rel="stylesheet" href="/css/home.css" />

<BranchModalScreen Show="showModal" OnSave="async (BranchModel branchInfo) => await SaveBranchAsync(branchInfo)" />

<div class="home-container">

    <h1>OlÃ¡, @dependecies.UserName ðŸ‘‹</h1>

    <DangerButton Text="Sair" OnClick="authProvider.UserLoggedOut" />

    <div class="resumo">
        <CardFinance Value=@dependecies.Statistic.Entry.ToString() Type="EFinanceCardType.Revenue" />
        <CardFinance Value=@dependecies.Statistic.Expense.ToString() Type="EFinanceCardType.Expense" />
        <CardFinance Value=@dependecies.Statistic.Balance.ToString() Type="EFinanceCardType.Balance" />
    </div>

    <h2 style="margin-top: 2rem;">Suas Branchs</h2> <AddButton OnClick="() => showModal=true" />

    <Message context="@messageErro" caption="Erro" messageType="@EMessageType.Error" />

    @if (dependecies.Branchs.Count == 0)
    {
        <h3>VocÃª nÃ£o possui branchs cadastradas</h3>
    }
    else
    {
        <div class="branchs-container">
            @foreach (var branch in dependecies.Branchs)
            {
                <BranchCard Name="@branch.Name" Create="@branch.CreatedAt" Description="@branch.Description" OnClick="async () => await GoToBranch(branch)" />
                <DangerButton Text="Excluir" OnClick="async () => await DeleteBranchAsync(branch.Id)" />
            }
        </div>
    }
</div>

@code
{
    #region System Properties
    public HomeDependecies dependecies = new();

    public string messageErro = string.Empty;
    public bool showModal;
    #endregion

    #region Handlers
    protected override async Task OnInitializedAsync()
    {
        try
        {
            dependecies = await service.GetHomeDependenciesAsync();
        }
        catch
        {
        }
    }

    protected async Task DeleteBranchAsync(int id)
    {
        try
        {
            await service.DeleteBranchAsync(id.ToString());

            Navigate.NavigateTo(Navigate.Uri, forceLoad: true);
        }
        catch(Exception ex)
        {
            messageErro = ex.Message;
        }
    }
    protected async Task SaveBranchAsync(BranchModel branchInfo)
    {
        try
        {
            await service.SaveBranchAsync(branchInfo);

            Navigate.NavigateTo(Navigate.Uri, forceLoad: true);
        }
        catch(Exception ex)
        {
            messageErro = ex.Message;
            showModal = false;
        }
    }
    protected async Task GoToBranch(BranchModel branch)
    {
        await service.SetBranchStorageAsync(branch);

        Navigate.NavigateTo("Branch");
    }
    #endregion
}