@page "/Home"
@using FinanceManagementBlazor.Services.HttpRequests.Transaction
@layout FinanceManagementBlazor.View.Layout.NoMenuLayout
@inject IHomeService service 
@inject NavigationManager Navigate
@inject AuthProvider authProvider

@attribute [Authorize]

<link rel="stylesheet" href="/css/home.css"/>

<ModalScreen Show="showModal" OnSave=" async (BranchModel branchInfo) => { await SaveBranchAsync(branchInfo); }"/>

<div class="home-container">

    <h1>OlÃ¡, @userName ðŸ‘‹</h1> 

    <DangerButton Text="Sair" OnClick="authProvider.UserLoggedOut"/>

    <div class="resumo">
        <CardFinance Value=@statistic.Entry.ToString() Type="EFinanceCardType.Revenue" />
        <CardFinance Value=@statistic.Expense.ToString() Type="EFinanceCardType.Expense" />
        <CardFinance Value=@statistic.Balance.ToString() Type="EFinanceCardType.Balance" />
    </div>

    <h2 style="margin-top: 2rem;">Suas Branchs</h2> <button @onclick="() => { showModal = true; }">add</button>

    @if (!string.IsNullOrEmpty(messageErro))
    {
        <Message context="@messageErro" caption="Erro" messageType="@EMessageType.Error"/>
    }

    @if (branchs.Count == 0)
    {
        <h3>VocÃª nÃ£o possui branchs cadastradas</h3>
    }
    else
    {
        <div class="branchs-container">
            @foreach (var branch in branchs)
            {
                <BranchCard Name="@branch.Name" Create="@branch.CreatedAt" Description="@branch.Description"/> 
                <DangerButton Text="Excluir" OnClick="async () => { await DeleteBranchAsync(branch.Id); }"/>
            }
        </div>
    }
</div>

@code
{
    #region System Properties
    public string userName = string.Empty;
    public string messageErro = string.Empty;
    public bool showModal;

    public List<BranchModel> branchs = [];
    public TransactionStatisticModel statistic = new(); 
    #endregion

    #region Handlers
    protected override async Task OnInitializedAsync()
    {
        try
        {
            (userName, branchs, statistic) = await service.GetUserNameBranchsAndStatisticAsync();
        }
        catch
        {    
        }
    }

    protected async Task DeleteBranchAsync(int id)
    {
        try
        {
            await service.DeleteBranchAsync(id.ToString());

            Navigate.NavigateTo(Navigate.Uri, forceLoad: true);
        }
        catch(Exception ex)
        {
            messageErro = ex.Message;
        }
    }
    protected async Task SaveBranchAsync(BranchModel branchInfo)
    {
        try
        {
            await service.SaveBranchAsync(branchInfo);

            Navigate.NavigateTo(Navigate.Uri, forceLoad: true);
        }
        catch(Exception ex)
        {
            messageErro = ex.Message;
            showModal = false;
            StateHasChanged();
        }
    }
    #endregion
}